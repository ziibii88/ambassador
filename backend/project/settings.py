"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from logging import getLogger
from pathlib import Path

from .logging import LOGGING as LOG_CONFIG

# Set the python logger and django logging
logger = getLogger(__name__)
LOGGING = LOG_CONFIG

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
try:
    from .local_config import SECRET_KEY as SECRET
except (ImportError, ModuleNotFoundError) as e:
    err_msg = "Must properly implement 'local_config.py' with SECRET_KEY var"
    logger.error(err_msg)
    raise NotImplementedError(err_msg)
SECRET_KEY = SECRET

# SECURITY WARNING: don't run with debug turned on in production!
try:
    from .local_config import DEBUG as DEBUG_CONFIG
except (ImportError, ModuleNotFoundError) as e:
    err_msg = "Must properly implement 'local_config.py' with DEBUG value"
    logger.error(err_msg)
    raise NotImplementedError(err_msg)
DEBUG = DEBUG_CONFIG

ALLOWED_HOSTS = []

# CORS HEADERS
# CORS_ALLOWED_ORIGINS = ALLOWED_HOSTS or []
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allows from all origins when DEBUG mode is on
CORS_ALLOW_CREDENTIALS = True  # cookies will be allowed to be included


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 3rd party apps
    'rest_framework',
    'corsheaders',
    'django_probes',
    # project apps
    'core',
    'common',
    'administrator',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # cors headers
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

AUTH_USER_MODEL = 'core.User'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
try:
    from .local_config import DATABASES as DB_CONFIG
except (ImportError, ModuleNotFoundError) as e:
    err_msg = "Must properly implement 'local_config.py' with DATABASES config"
    logger.error(err_msg)
    raise NotImplementedError(err_msg)
DATABASES = DB_CONFIG


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Django REST Framework
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'common.auth.JWTAuth',  # custom JWT created with PyJWT
        # 'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_FILTER_BACKENDS': [
        # django-filters
        # https://www.django-rest-framework.org/api-guide/filtering/
        # https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html
        'django_filters.rest_framework.DjangoFilterBackend',
        # https://www.django-rest-framework.org/api-guide/filtering/#searchfilter
        'rest_framework.filters.SearchFilter',
        # https://www.django-rest-framework.org/api-guide/filtering/#orderingfilter
        'rest_framework.filters.OrderingFilter'
    ]
}


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
